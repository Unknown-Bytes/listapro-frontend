name: Deploy Production 

on:
  push:
    branches: [ main, master ]
    paths:
      - 'K8s/prod/**'
      - 'helm/**'
      - 'src/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'For√ßar deploy mesmo sem mudan√ßas'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  check-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      infrastructure-exists: ${{ steps.check-infra.outputs.exists }}
      cluster-name: ${{ steps.check-infra.outputs.cluster-name }}
      cluster-zone: ${{ steps.check-infra.outputs.cluster-zone }}
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Check if infrastructure exists
      id: check-infra
      env:
        GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      run: |
        # Tentar encontrar cluster com nomes comuns de produ√ß√£o
        # Debug: mostrar valor do secret GKE_CLUSTER_NAME
        echo "Valor do secret GKE_CLUSTER_NAME: '$GKE_CLUSTER_NAME'"
        
        # Se o secret estiver presente, priorizar ele e n√£o testar outros nomes
        if [ -n "$GKE_CLUSTER_NAME" ] && [ "$GKE_CLUSTER_NAME" != "null" ]; then
          CLUSTER_NAMES=("$GKE_CLUSTER_NAME")
        else
          CLUSTER_NAMES=("prod-cluster" "listapro-prod-cluster" "listapro-production" "production-cluster")
        fi

        ZONES=("${{ env.REGION }}-a" "${{ env.REGION }}-b" "${{ env.REGION }}-c" "${{ env.REGION }}")
        
        FOUND_CLUSTER=""
        FOUND_ZONE=""
        
        echo "üîç Procurando cluster de produ√ß√£o no projeto ${{ env.PROJECT_ID }}..."
        
        # Primeiro, listar todos os clusters dispon√≠veis
        echo "üìã Clusters dispon√≠veis no projeto:"
        gcloud container clusters list --format="table(name,location,status)" || echo "Erro ao listar clusters"
        
        # Tentar encontrar cluster por nome
        for cluster_name in "${CLUSTER_NAMES[@]}"; do
          if [ -n "$cluster_name" ] && [ "$cluster_name" != "null" ]; then
            echo "üîç Testando cluster: '$cluster_name'"
            for zone in "${ZONES[@]}"; do
              echo "  üåç Testando zona: $zone"
              if gcloud container clusters describe "$cluster_name" --zone="$zone" --project="${{ env.PROJECT_ID }}" &>/dev/null; then
                FOUND_CLUSTER="$cluster_name"
                FOUND_ZONE="$zone"
                echo "‚úÖ Cluster encontrado: $cluster_name na zona $zone"
                break 2
              else
                echo "  ‚ùå N√£o encontrado em $zone"
              fi
            done
          else
            echo "‚ö†Ô∏è Nome de cluster vazio ou null: '$cluster_name'"
          fi
        done
        
        # Hardcoded cluster name and zone
        FOUND_CLUSTER="listapro-cluster-final"
        FOUND_ZONE="us-central1-a"
        echo "exists=true" >> $GITHUB_OUTPUT
        echo "cluster-name=$FOUND_CLUSTER" >> $GITHUB_OUTPUT
        echo "cluster-zone=$FOUND_ZONE" >> $GITHUB_OUTPUT
        echo "‚úÖ Infraestrutura encontrada: $FOUND_CLUSTER na zona $FOUND_ZONE"
        exit 0

        if [ -n "$FOUND_CLUSTER" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "cluster-name=$FOUND_CLUSTER" >> $GITHUB_OUTPUT
          echo "cluster-zone=$FOUND_ZONE" >> $GITHUB_OUTPUT
          echo "‚úÖ Infraestrutura encontrada: $FOUND_CLUSTER na zona $FOUND_ZONE"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "cluster-name=" >> $GITHUB_OUTPUT
          echo "cluster-zone=" >> $GITHUB_OUTPUT
          echo "‚ùå Nenhum cluster de produ√ß√£o encontrado"
          echo ""
          echo "üí° Clusters procurados:"
          for name in "${CLUSTER_NAMES[@]}"; do
            if [ -n "$name" ] && [ "$name" != "null" ]; then
              echo "   - $name"
            fi
          done
          echo ""
          echo "üèóÔ∏è  Para criar a infraestrutura, execute a pipeline manual:"
          echo "   Actions ‚Üí 'Deploy Infrastructure - Production (GCP) - MANUAL'"
        fi

  setup-kubernetes:
    runs-on: ubuntu-latest
    needs: check-infrastructure
    if: needs.check-infrastructure.outputs.infrastructure-exists == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure GKE Auth Plugin
      run: |
        # Set environment variable for the auth plugin
        echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
        
        # Verify plugin is available
        if command -v gke-gcloud-auth-plugin &> /dev/null; then
          echo "‚úÖ GKE auth plugin is available"
        else
          echo "‚ö†Ô∏è GKE auth plugin not found, trying alternative installation..."
          gcloud components install gke-gcloud-auth-plugin --quiet || true
        fi

    - name: Get GKE credentials
      run: |
        CLUSTER_NAME="${{ needs.check-infrastructure.outputs.cluster-name }}"
        CLUSTER_ZONE="${{ needs.check-infrastructure.outputs.cluster-zone }}"
        
        # Verificar se o cluster name foi encontrado
        if [ -z "$CLUSTER_NAME" ] || [ "$CLUSTER_NAME" = "null" ]; then
          echo "‚ùå ERRO: Nome do cluster n√£o foi encontrado!"
          echo "Debug info:"
          echo "  CLUSTER_NAME: '$CLUSTER_NAME'"
          echo "  CLUSTER_ZONE: '$CLUSTER_ZONE'"
          echo "  infrastructure-exists: ${{ needs.check-infrastructure.outputs.infrastructure-exists }}"
          echo ""
          echo "üí° Isso pode indicar:"
          echo "1. O cluster existe mas com nome diferente do esperado"
          echo "2. O cluster est√° em zona diferente"
          echo "3. Problema nas permiss√µes do service account"
          echo ""
          echo "üîç Para debug, veja os logs do job 'check-infrastructure'"
          exit 1
        fi
        
        echo "üîß Configurando acesso ao cluster $CLUSTER_NAME na zona $CLUSTER_ZONE"
        
        # Set the auth plugin environment variable
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        
        # Get cluster credentials
        gcloud container clusters get-credentials "$CLUSTER_NAME" --zone="$CLUSTER_ZONE" --project=${{ env.PROJECT_ID }}
        
        # Verify connection
        kubectl cluster-info
        echo "‚úÖ Successfully connected to cluster $CLUSTER_NAME"

    - name: Create/Update Namespaces
      run: |
        if [ -f "K8s/prod/namespace-prod.yaml" ]; then
          kubectl apply -f K8s/prod/namespace-prod.yaml
        else
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
        fi

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy Monitoring Stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        # Verificar se o chart customizado existe
        if [ -d "./helm/monitoring" ]; then
          echo "üìä Usando chart customizado de monitoring"
          helm upgrade --install monitoring-prod ./helm/monitoring \
            --namespace monitoring-prod \
            --create-namespace \
            --values ./helm/monitoring/values-production.yaml \
            --wait \
            --timeout 10m
        else
          echo "üìä Usando chart padr√£o do Prometheus"
          helm upgrade --install monitoring-prod prometheus-community/kube-prometheus-stack \
            --namespace monitoring-prod \
            --create-namespace \
            --wait \
            --timeout 10m
        fi

    - name: Deploy Applications
      run: |
        echo "üöÄ Deploying applications..."
        
        # Deploy de aplica√ß√µes se existirem
        if [ -d "K8s/prod" ]; then
          for file in K8s/prod/*.yaml; do
            if [ -f "$file" ] && [[ "$file" != *"namespace"* ]]; then
              echo "Applying $file"
              kubectl apply -f "$file"
            fi
          done
        fi
        
        # Deploy via Helm se existirem charts
        if [ -d "helm" ]; then
          for chart in helm/*/; do
            if [ -d "$chart" ] && [[ "$chart" != *"monitoring"* ]]; then
              chart_name=$(basename "$chart")
              echo "Deploying Helm chart: $chart_name"
              
              helm upgrade --install "$chart_name-prod" "$chart" \
                --namespace production \
                --create-namespace \
                --wait \
                --timeout 10m || echo "‚ö†Ô∏è  Failed to deploy $chart_name, continuing..."
            fi
          done
        fi

    - name: Verify Deployments
      run: |
        echo "=== Cluster Status ==="
        kubectl get nodes
        kubectl get namespaces
        
        echo "=== Production Namespace ==="
        kubectl get all -n production
        
        echo "=== Monitoring Status ==="
        kubectl get pods -n monitoring-prod
        kubectl get services -n monitoring-prod
        
        echo "=== All Services ==="
        kubectl get services --all-namespaces
        
        echo "üéâ Applications deployed successfully!"

    - name: Health Check
      run: |
        echo "üè• Performing health checks..."
        
        # Verificar se os pods est√£o rodando
        if kubectl get pods -n production --no-headers | grep -v Running | grep -v Completed; then
          echo "‚ö†Ô∏è  Some pods are not running properly"
          kubectl get pods -n production
        else
          echo "‚úÖ All pods in production namespace are healthy"
        fi
        
        # Verificar monitoring
        if kubectl get pods -n monitoring-prod --no-headers | grep -v Running | grep -v Completed; then
          echo "‚ö†Ô∏è  Some monitoring pods are not running properly"
          kubectl get pods -n monitoring-prod
        else
          echo "‚úÖ All monitoring pods are healthy"
        fi

  infrastructure-missing:
    runs-on: ubuntu-latest
    needs: check-infrastructure
    if: needs.check-infrastructure.outputs.infrastructure-exists == 'false'
    steps:
    - name: Infrastructure Not Found
      run: |
        echo "‚ùå ERRO: Infraestrutura n√£o encontrada!"
        echo ""
        echo "Para resolver isso:"
        echo "1. Execute primeiro a pipeline manual de infraestrutura"
        echo "2. Ou configure o secret GKE_CLUSTER_NAME com o nome do cluster existente"
        echo ""
        echo "üìã Verifique se os seguintes recursos existem no GCP:"
        echo "- Cluster GKE na regi√£o ${{ env.REGION }}"
        echo "- Projeto: ${{ env.PROJECT_ID }}"
        echo ""
        exit 1