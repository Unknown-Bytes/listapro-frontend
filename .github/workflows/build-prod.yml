name: Fast Deploy to GCP

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Instalar dependências
        run: npm ci

      - name: Executar testes
        run: npm test

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Definir hash curto do commit
        id: vars
        run: echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da imagem Docker
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:${{ steps.vars.outputs.short_sha }} .

      - name: Push das imagens
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:${{ steps.vars.outputs.short_sha }}

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Instalar gcloud e auth plugin
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configurar acesso ao GKE
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud container clusters get-credentials listapro-cluster-final \
            --zone us-central1-a \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Verificar recursos no cluster
        run: |
          echo "=== Verificando namespaces ==="
          kubectl get namespaces
          
          echo "=== Verificando se namespace listapro-prod existe ==="
          kubectl get namespace listapro-prod || echo "Namespace listapro-prod não encontrado"
          
          echo "=== Verificando deployments no namespace listapro-prod ==="
          kubectl get deployments -n listapro-prod || echo "Namespace listapro-prod não existe ou não há deployments"
          
          echo "=== Verificando todos os deployments ==="
          kubectl get deployments --all-namespaces | grep frontend || echo "Nenhum deployment frontend encontrado"

      - name: Criar namespace se não existir
        run: |
          kubectl create namespace listapro-prod --dry-run=client -o yaml | kubectl apply -f -

      - name: Aplicar manifests do Kubernetes
        run: |
          echo "=== Aplicando namespace ==="
          kubectl apply -f K8s/prod/namespace-prod.yaml || echo "Namespace já existe ou erro na aplicação"
          
          echo "=== Aplicando ConfigMaps ==="
          kubectl apply -f K8s/prod/frontend/frontend-prod-config.yml
          
          echo "=== Aplicando Services ==="
          kubectl apply -f K8s/prod/frontend/frontend-prod-service.yml
          kubectl apply -f K8s/prod/backend/backend-prod-service.yml
          
          echo "=== Aplicando Deployments ==="
          kubectl apply -f K8s/prod/frontend/frontend-prod-deployment.yml
          kubectl apply -f K8s/prod/backend/
          
          echo "=== Verificando se deployment foi criado ==="
          kubectl get deployment listapro-frontend-prod -n listapro-prod || echo "Deployment ainda não foi criado"
          
          echo "=== Aguardando deployment estar disponível ==="
          kubectl wait --for=condition=available --timeout=300s deployment/listapro-frontend-prod -n listapro-prod || {
            echo "Deployment não está disponível, verificando eventos e logs..."
            kubectl describe deployment listapro-frontend-prod -n listapro-prod || echo "Deployment não encontrado"
            kubectl get events -n listapro-prod --sort-by=.metadata.creationTimestamp || echo "Sem eventos"
            
            echo "Tentando recriar o deployment..."
            kubectl delete deployment listapro-frontend-prod -n listapro-prod --ignore-not-found=true
            kubectl apply -f K8s/prod/frontend/frontend-prod-deployment.yml
            
            echo "Aguardando nova tentativa..."
            kubectl wait --for=condition=available --timeout=300s deployment/listapro-frontend-prod -n listapro-prod || echo "Falha na segunda tentativa"
          }

      - name: Atualizar imagem no deployment do cluster GKE
        run: |
          echo "=== Verificando se deployment existe antes da atualização ==="
          kubectl get deployment listapro-frontend-prod -n listapro-prod
          
          echo "=== Atualizando imagem do deployment ==="
          kubectl set image deployment/listapro-frontend-prod \
            listapro-frontend=${{ secrets.DOCKER_USERNAME }}/listapro-frontend:${{ steps.vars.outputs.short_sha }} \
            -n listapro-prod
            
          echo "=== Verificando status após atualização ==="
          kubectl describe deployment listapro-frontend-prod -n listapro-prod

      - name: Verificar rollout
        run: kubectl rollout status deployment/listapro-frontend-prod -n listapro-prod