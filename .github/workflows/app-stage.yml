name: Deploy Application - Stage (Digital Ocean)

on:
  push:
    branches: [ develop, stage ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'lib/**'
      - 'public/**'
      - 'types/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'nginx/**'
  workflow_dispatch:

env:
  DO_TOKEN: ${{ secrets.DO_TOKEN }}
  DOCKER_REGISTRY: registry.digitalocean.com/listapro-stage-registry
  IMAGE_NAME: listapro-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/stage'
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: echo "tag=stage-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}

    - name: Log in to DO Container Registry
      run: doctl registry login --expiry-seconds 1200

    - name: Build Docker image
      run: |
        docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:${{ steps.image-tag.outputs.tag }} .
        docker tag $DOCKER_REGISTRY/$IMAGE_NAME:${{ steps.image-tag.outputs.tag }} $DOCKER_REGISTRY/$IMAGE_NAME:stage

    - name: Push to registry
      run: |
        docker push $DOCKER_REGISTRY/$IMAGE_NAME:${{ steps.image-tag.outputs.tag }}
        docker push $DOCKER_REGISTRY/$IMAGE_NAME:stage

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/stage'
    environment: stage-application
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}

    - name: Get cluster name from Terraform
      id: cluster-info
      run: |
        # Conectar com Digital Ocean
        doctl auth init --access-token $DO_TOKEN
        
        # Buscar cluster que contenha "listapro-stage"
        CLUSTER_NAME=$(doctl kubernetes cluster list --format Name --no-header | grep -E "listapro.*stage" | head -n1)
        
        if [ -z "$CLUSTER_NAME" ]; then
          echo "‚ùå Cluster n√£o encontrado! Execute primeiro a pipeline de infraestrutura."
          exit 1
        fi
        
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "‚úÖ Cluster encontrado: $CLUSTER_NAME"

    - name: Configure kubectl
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ steps.cluster-info.outputs.cluster-name }}

    - name: Update deployment with new image
      run: |
        # Atualizar deployment com nova imagem
        sed -i 's|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}|g' K8s/stage/frontend/frontend-stage-deployment.yml

    - name: Deploy application
      run: |
        kubectl apply -f K8s/stage/frontend/

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/listapro-frontend-stage -n listapro-stage --timeout=300s

    - name: Verify deployment
      run: |
        echo "=== Pod Status ==="
        kubectl get pods -n listapro-stage
        
        echo "=== Service Status ==="
        kubectl get services -n listapro-stage
        
        echo "=== Recent Events ==="
        kubectl get events -n listapro-stage --sort-by='.lastTimestamp' | tail -10

    - name: Get application URLs
      run: |
        echo "üéâ Application deployed successfully!"
        echo ""
        echo "=== Application URLs ==="
        LB_IP=$(kubectl get service listapro-frontend-stage-service -n listapro-stage -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        echo "Application: http://$LB_IP"
        
        echo ""
        echo "=== Health Checks ==="
        if [ "$LB_IP" != "pending" ]; then
          echo "Health: http://$LB_IP/api/health"
          echo "Ready: http://$LB_IP/api/ready"
          echo "Metrics: http://$LB_IP/api/metrics"
        else
          echo "‚è≥ Load balancer IP still pending..."
        fi
