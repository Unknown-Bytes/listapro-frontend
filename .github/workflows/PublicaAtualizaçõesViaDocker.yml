name: CI/CD com Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Instalar dependências
        run: npm ci

      - name: Executar testes
        run: npm test

  pushParaDockerHub:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fazer login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da imagem Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:latest .

      - name: Push da imagem Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:latest
  
  deploy:
    needs: pushParaDockerHub
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        
      - name: Fazer login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Criar diretórios necessários
        run: |
          mkdir -p nginx/conf.d
          mkdir -p certbot/conf
          mkdir -p certbot/www
      
      - name: Configurar Nginx
        run: |
          echo "${{ secrets.NGINX_CONFIG }}" > nginx/conf.d/default.conf
      
      - name: Baixar imagem Docker
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/listapro-frontend:latest
      
      - name: Parar e remover contêineres existentes
        run: |
          sudo docker-compose down || true
      
      - name: Executar contêineres
        run: |
          sudo docker-compose up -d
      
      - name: Verificar se os certificados já existem
        id: check_certs
        run: |
          if [ ! -d "./certbot/conf/live/petone.site" ]; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi
      
      - name: Obter certificados iniciais
        if: steps.check_certs.outputs.exists == 'false'
        run: |
          sudo chmod +x ./init-letsencrypt.sh
          sudo ./init-letsencrypt.sh
      
      - name: Verificar logs dos contêineres
        run: |
          sudo docker-compose logs --tail=20 nginx
          sudo docker-compose logs --tail=20 nextjs
          sudo docker-compose logs --tail=20 certbot