name: MANUAL Deploy Production Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirma o deploy da infraestrutura? (Digite "CONFIRMO" para continuar)'
        required: true
        default: ''
      action:
        description: 'Ação do Terraform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAME: listapro-staging-registry
  CLUSTER_NAME: listapro-staging-cluster

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "CONFIRMO" ]; then
          echo "❌ Deploy cancelado. Digite 'CONFIRMO' para confirmar o deploy da infraestrutura."
          exit 1
        fi
        echo "✅ Confirmação válida. Prosseguindo com o deploy da infraestrutura..."

  infrastructure-staging:
    runs-on: ubuntu-latest
    needs: validate-input
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false

    - name: 🌊 Setup DigitalOcean
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.29.0'

    - name: 🔍 Get Available Kubernetes Versions
      run: |
        echo "Available Kubernetes versions:"
        doctl kubernetes options versions
        echo "Latest version:"
        doctl kubernetes options versions --output json | jq -r '.[0].slug'

    # Deploy Infrastructure usando script inteligente
    - name: 🚀 Deploy Staging Infrastructure
      run: |
        chmod +x scripts/universal-deploy.sh
        chmod +x scripts/smart-deploy-do.sh
        
        # Set environment variables for staging deployment
        export DIGITALOCEAN_TOKEN="${{ secrets.DIGITALOCEAN_TOKEN }}"
        export SKIP_CONFIRM=1
        
        # Run smart deployment for staging
        ./scripts/universal-deploy.sh digitalocean production ${{ github.event.inputs.action }}

    - name: 🔧 Configure kubectl for Staging Cluster
      if: github.event.inputs.action == 'apply'
      run: |
        # Get cluster name and configure kubectl
        CLUSTER_NAME="${{ env.CLUSTER_NAME }}"
        echo "Configuring kubectl for cluster: $CLUSTER_NAME"
        doctl kubernetes cluster kubeconfig save "$CLUSTER_NAME"
        
        # Verify cluster connection
        kubectl cluster-info
        kubectl get nodes

    - name: 📊 Install Basic Infrastructure
      if: github.event.inputs.action == 'apply'
      run: |
        # Install basic infrastructure if scripts exist
        if [ -f "scripts/install-simple-infrastructure-no-traefik.sh" ]; then
          chmod +x scripts/install-simple-infrastructure-no-traefik.sh
          ./scripts/install-simple-infrastructure-no-traefik.sh
        fi
        
        # Clean orphaned webhooks if script exists
        if [ -f "scripts/clean-orphaned-webhooks.sh" ]; then
          chmod +x scripts/clean-orphaned-webhooks.sh
          ./scripts/clean-orphaned-webhooks.sh
        fi
      continue-on-error: true

    - name: 📋 Staging Infrastructure Summary
      run: |
        echo "🎉 Staging Infrastructure action completed!"
        echo "Cloud: Digital Ocean"
        echo "Environment: staging"
        echo "Action: ${{ github.event.inputs.action }}"
        echo "Registry: ${{ env.REGISTRY_NAME }}"
        echo "Cluster: ${{ env.CLUSTER_NAME }}"
        echo ""
        echo "🔗 Next steps:"
        echo "1. Run the build-stage pipeline for application deployment"
        echo "2. Test the staging environment"
        echo "3. Promote to production when ready"
        echo ""
        echo "🔧 Useful commands:"
        echo "doctl kubernetes cluster kubeconfig save ${{ env.CLUSTER_NAME }}"
        echo "kubectl get pods -n listapro-staging"
        echo "kubectl get services -n listapro-staging"
