name: Deploy Infrastructure - Production (GCP) - MANUAL

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirma o deploy da infraestrutura? (Digite "CONFIRMO" para continuar)'
        required: true
        default: ''
      environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "CONFIRMO" ]; then
          echo "❌ Deploy cancelado. Digite 'CONFIRMO' para confirmar o deploy da infraestrutura."
          exit 1
        fi
        echo "✅ Confirmação válida. Prosseguindo com o deploy da infraestrutura..."

  terraform-plan:
    runs-on: ubuntu-latest
    needs: validate-input
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Terraform Init
      working-directory: ./terraform/gcp
      run: terraform init
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Plan
      working-directory: ./terraform/gcp
      run: terraform plan -out=tfplan
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod-infra-${{ github.run_number }}
        path: terraform/gcp/tfplan
        retention-days: 30

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production-infrastructure
    outputs:
      cluster-name: ${{ steps.terraform-output.outputs.cluster-name }}
      artifact-registry-url: ${{ steps.terraform-output.outputs.artifact-registry-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod-infra-${{ github.run_number }}
        path: terraform/gcp/

    - name: Terraform Init
      working-directory: ./terraform/gcp
      run: terraform init
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Handle Existing Resources
      working-directory: ./terraform/gcp
      run: |
        # Tentar aplicar mesmo com recursos existentes
        # O Terraform irá usar data sources para recursos existentes
        echo "Using data sources for existing resources..."
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Apply
      working-directory: ./terraform/gcp
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Get Terraform Outputs
      id: terraform-output
      working-directory: ./terraform/gcp
      run: |
        echo "cluster-name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "artifact-registry-url=$(terraform output -raw artifact_registry_url)" >> $GITHUB_OUTPUT

    - name: Save Infrastructure Info
      run: |
        echo "🏗️ Infraestrutura criada com sucesso!"
        echo "📋 Informações da infraestrutura:"
        echo "- Cluster: ${{ steps.terraform-output.outputs.cluster-name }}"
        echo "- Registry: ${{ steps.terraform-output.outputs.artifact-registry-url }}"
        echo "- Região: ${{ env.REGION }}"
        echo "- Projeto: ${{ env.PROJECT_ID }}"
        
        # Salvar informações para uso posterior
        mkdir -p infrastructure-info
        cat > infrastructure-info/infra-details.json << EOF
        {
          "cluster_name": "${{ steps.terraform-output.outputs.cluster-name }}",
          "artifact_registry_url": "${{ steps.terraform-output.outputs.artifact-registry-url }}",
          "region": "${{ env.REGION }}",
          "project_id": "${{ env.PROJECT_ID }}",
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

    - name: Upload Infrastructure Info
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-info-${{ github.run_number }}
        path: infrastructure-info/
        retention-days: 90