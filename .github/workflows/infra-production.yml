name: Deploy Infrastructure - Production (GCP)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'terraform/gcp/**'
      - 'K8s/prod/**'
      - 'helm/**'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Terraform Init
      working-directory: ./terraform/gcp
      run: terraform init
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Plan
      working-directory: ./terraform/gcp
      run: terraform plan -out=tfplan
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod-infra
        path: terraform/gcp/tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production-infrastructure
    outputs:
      cluster-name: ${{ steps.terraform-output.outputs.cluster-name }}
      artifact-registry-url: ${{ steps.terraform-output.outputs.artifact-registry-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod-infra
        path: terraform/gcp/

    - name: Terraform Init
      working-directory: ./terraform/gcp
      run: terraform init
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Handle Existing Resources
      working-directory: ./terraform/gcp
      run: |
        # Tentar aplicar mesmo com recursos existentes
        # O Terraform irÃ¡ usar data sources para recursos existentes
        echo "Using data sources for existing resources..."
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Apply
      working-directory: ./terraform/gcp
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Get Terraform Outputs
      id: terraform-output
      working-directory: ./terraform/gcp
      run: |
        echo "cluster-name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "artifact-registry-url=$(terraform output -raw artifact_registry_url)" >> $GITHUB_OUTPUT

  setup-kubernetes:
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ needs.terraform-apply.outputs.cluster-name }} --zone=${{ env.REGION }}-a --project=${{ env.PROJECT_ID }}

    - name: Create Namespaces
      run: |
        kubectl apply -f K8s/prod/namespace-prod.yaml

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy Monitoring Stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        helm upgrade --install monitoring-prod ./helm/monitoring \
          --namespace monitoring-prod \
          --create-namespace \
          --values ./helm/monitoring/values-production.yaml \
          --wait

    - name: Verify Infrastructure
      run: |
        echo "=== Cluster Status ==="
        kubectl get nodes
        kubectl get namespaces
        
        echo "=== Monitoring Status ==="
        kubectl get pods -n monitoring-prod
        kubectl get services -n monitoring-prod
        
        echo "ðŸŽ‰ Production Infrastructure deployed successfully!"
