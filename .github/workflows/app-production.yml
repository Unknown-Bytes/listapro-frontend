name: Deploy Application - Production (GCP)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'lib/**'
      - 'public/**'
      - 'types/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'nginx/**'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: listapro-prod-repo
  SERVICE: listapro-frontend
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: echo "tag=prod-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Build Docker image
      run: |
        docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:${{ steps.image-tag.outputs.tag }} .
        docker tag $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:${{ steps.image-tag.outputs.tag }} $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest

    - name: Push to Artifact Registry
      run: |
        docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:${{ steps.image-tag.outputs.tag }}
        docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production-application
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Get cluster info
      id: cluster-info
      run: |
        # Buscar cluster que contenha "listapro-prod"
        CLUSTER_NAME=$(gcloud container clusters list --format="value(name)" --filter="name~listapro.*prod" --limit=1)
        
        if [ -z "$CLUSTER_NAME" ]; then
          echo "‚ùå Cluster n√£o encontrado! Execute primeiro a pipeline de infraestrutura."
          exit 1
        fi
        
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "‚úÖ Cluster encontrado: $CLUSTER_NAME"

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ steps.cluster-info.outputs.cluster-name }} --zone=$REGION-a --project=$PROJECT_ID

    - name: Update deployment with new image
      run: |
        # Atualizar deployment com nova imagem
        sed -i 's|image: .*|image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ needs.build-and-push.outputs.image-tag }}|g' K8s/prod/frontend/frontend-prod-deployment.yml

    - name: Deploy application
      run: |
        kubectl apply -f K8s/prod/frontend/

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/listapro-frontend-prod -n listapro-prod --timeout=300s

    - name: Verify deployment
      run: |
        echo "=== Pod Status ==="
        kubectl get pods -n listapro-prod
        
        echo "=== Service Status ==="
        kubectl get services -n listapro-prod
        
        echo "=== Recent Events ==="
        kubectl get events -n listapro-prod --sort-by='.lastTimestamp' | tail -10

    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Esperar load balancer
        sleep 60
        
        LB_IP=$(kubectl get service listapro-frontend-prod-service -n listapro-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        
        if [ "$LB_IP" != "pending" ]; then
          echo "Testing health endpoint..."
          if curl -f http://$LB_IP/api/health; then
            echo "‚úÖ Application health check passed"
          else
            echo "‚ùå Application health check failed"
            exit 1
          fi
        else
          echo "‚è≥ Load balancer IP still pending, skipping health check"
        fi

    - name: Get application URLs
      run: |
        echo "üéâ Application deployed successfully!"
        echo ""
        echo "=== Application URLs ==="
        LB_IP=$(kubectl get service listapro-frontend-prod-service -n listapro-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        echo "Application: http://$LB_IP"
        
        echo ""
        echo "=== Health Checks ==="
        if [ "$LB_IP" != "pending" ]; then
          echo "Health: http://$LB_IP/api/health"
          echo "Ready: http://$LB_IP/api/ready"
          echo "Metrics: http://$LB_IP/api/metrics"
        else
          echo "‚è≥ Load balancer IP still pending..."
        fi
